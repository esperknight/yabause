matrix:
  include:

    # linux gcc
    - compiler: gcc
      env: testenv="linux gcc"
      

    # linux clang
    - compiler: clang
      env: testenv="linux clang"

    # os x cocoa port
    - language: objective-c
      env: testenv="os x cocoa port"
      os: osx
      compiler: clang
      before_script:
        - cd ../src

        # enable cmake to find x11 and xrandr
        - echo 'INCLUDE_DIRECTORIES("/opt/X11/include")' > temp.txt
        - echo 'LINK_DIRECTORIES("/opt/X11/lib")' >> temp.txt
        - cat temp.txt CMakeLists.txt > temp2.txt
        - rm CMakeLists.txt
        - mv temp2.txt CMakeLists.txt
        - cd ../build

    # mingw-w64 windows cross compile, libyabause only
    # needs qt and other deps built
    - compiler: gcc
      env: testenv="mingw-w64 windows cross compile, libyabause only"
      addons:
        apt:
          packages:
            - gcc-mingw-w64-x86-64
            - g++-mingw-w64-x86-64
            - binutils-mingw-w64-x86-64
            - mingw-w64-dev
      script:
        # create toolchain file so we can cross compile
        - echo 'SET(CMAKE_SYSTEM_NAME Windows)' > toolchain.cmake
        - echo 'SET(CMAKE_C_COMPILER   x86_64-w64-mingw32-gcc)' >> toolchain.cmake
        - echo 'SET(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)' >> toolchain.cmake
        - echo 'SET(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)' >> toolchain.cmake
        - cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake ..
        - make

    # compile runner and run yabauseut tests
    - compiler: gcc
      env: testenv="compile runner and run yabauseut tests"
      script:
        - cmake -DYAB_PORTS=runner -DSH2_DYNAREC=OFF -DYAB_WANT_C68K=OFF -DYAB_WANT_Q68=OFF -DYAB_WANT_OPENGL=OFF ..
        - make
        - cd src/runner
        #todo compile this instead
        - git clone git://github.com/d356/yabauseut-bin.git
        - ./yabause yabauseut-bin/YabauseUT.elf

language: cpp

before_install:
  - cd yabause
  - mkdir build
  - cd build

script:
  - cmake ..
  - make
